projection_i$y_Recovery[projection_i$Year == y] <- projection_i$y_Recovery[projection_i$Year == (y-1)] *  exp(trend_seq_logscale[proj_years == y])
}
samps_StatusQuo[i,which(year_seq_projection %in% projection_i$Year)] <- projection_i$y_StatusQuo
samps_Recovery[i,which(year_seq_projection %in% projection_i$Year)] <- projection_i$y_Recovery
samps_gam[i,1:length(i_dat$gam_pred)] <- exp(i_dat$gam_pred)
}
# ----------------------------------------------------
# Round estimates/projections to 3 decimal places
# ----------------------------------------------------
samps_gam <- round(samps_gam,3)
samps_StatusQuo <- round(samps_StatusQuo,3)
samps_Recovery <- round(samps_Recovery,3)
# ----------------------------------------------------
# Summarize indices each year
# ----------------------------------------------------
indices_summarized <- samps %>%
reshape2::melt() %>%
group_by(year) %>%
summarize(Index_q_0.025 = quantile(value,0.025),
Index = quantile(value,0.5),
Index_q_0.975 = quantile(value,0.975)) %>%
dplyr::rename(Year = year)
# ----------------------------------------------------
# Current status (relative to projections and historical abundance)
# ----------------------------------------------------
status_year_number <- which(year_seq_projection == final_year_of_data)
Prob_Exceed_StatusQuo <- 100*mean(samps_gam[,status_year_number] > samps_StatusQuo[,status_year_number]) %>% round(3)
Prob_Exceed_Recovery <- 100*mean(samps_gam[,status_year_number] > samps_Recovery[,status_year_number]) %>% round(3)
Prob_Exceed_Baseline <- 100*mean(samps_gam[,status_year_number] > samps_gam[,1]) %>% round(3)
# ---------------------------------------------------------------------
# Calculate indices expressed as percent of baseline level
# ---------------------------------------------------------------------
percent_of_Baseline_StatusQuo <- samps_StatusQuo
percent_of_Baseline_Recovery <- samps_Recovery
for (j in 1:ncol(percent_of_Baseline_StatusQuo)){
percent_of_Baseline_StatusQuo[,j] <- 100* percent_of_Baseline_StatusQuo[,j]/Index_baseline
percent_of_Baseline_Recovery[,j] <- 100* percent_of_Baseline_Recovery[,j]/Index_baseline
}
percent_of_Baseline_Obs <- samps
for (j in 1:ncol(percent_of_Baseline_Obs)) percent_of_Baseline_Obs[,j] <- 100* percent_of_Baseline_Obs[,j]/Index_baseline
# -------------------------------
# Relevant summaries of indices
# -------------------------------
# Credible intervals on gam fit to historical indices
gam_summary <- reshape2::melt(samps_gam) %>%
rename(samp = Var1, year_number = Var2, gam = value) %>%
mutate(Year = year_seq_projection[year_number]) %>%
group_by(Year) %>%
summarize(gam_med = median(gam, na.rm = TRUE),
gam_q_0.025 = quantile(gam,0.025, na.rm = TRUE),
gam_q_0.975 = quantile(gam,0.975, na.rm = TRUE))
# Credible intervals on status quo projection
StatusQuo_summary <- reshape2::melt(samps_StatusQuo) %>%
rename(samp = Var1, year_number = Var2, StatusQuo = value) %>%
mutate(Year = year_seq_projection[year_number]) %>%
group_by(Year) %>%
summarize(StatusQuo_med = median(StatusQuo),
StatusQuo_q_0.025 = quantile(StatusQuo,0.025, na.rm = TRUE),
StatusQuo_q_0.975 = quantile(StatusQuo,0.975, na.rm = TRUE))
# Credible intervals on recovery projection
Recovery_summary <- reshape2::melt(samps_Recovery) %>%
rename(samp = Var1, year_number = Var2, Recovery = value) %>%
mutate(Year = year_seq_projection[year_number]) %>%
group_by(Year) %>%
summarize(Recovery_med = median(Recovery),
Recovery_q_0.025 = quantile(Recovery,0.025, na.rm = TRUE),
Recovery_q_0.975 = quantile(Recovery,0.975, na.rm = TRUE))
# Credible intervals on estimates of percent of historical abundance
percent_change_summary_Obs <- reshape2::melt(percent_of_Baseline_Obs) %>%
rename(Year = year, Obs = value) %>%
group_by(Year) %>%
summarize(Obs_med = median(Obs),
Obs_q_0.025 = quantile(Obs,0.025, na.rm = TRUE),
Obs_q_0.975 = quantile(Obs,0.975, na.rm = TRUE))
# Credible intervals on estimates of percent change, under status quo projection
percent_change_summary_StatusQuo <- reshape2::melt(percent_of_Baseline_StatusQuo) %>%
rename(samp = Var1, year_number = Var2, StatusQuo = value) %>%
mutate(Year = year_seq_projection[year_number]) %>%
group_by(Year) %>%
summarize(StatusQuo_med = median(StatusQuo),
StatusQuo_q_0.025 = quantile(StatusQuo,0.025, na.rm = TRUE),
StatusQuo_q_0.975 = quantile(StatusQuo,0.975, na.rm = TRUE))
# Credible intervals on estimates of percent change, under recovery projection
percent_change_summary_Recovery <- reshape2::melt(percent_of_Baseline_Recovery) %>%
rename(samp = Var1, year_number = Var2, Recovery = value) %>%
mutate(Year = year_seq_projection[year_number]) %>%
group_by(Year) %>%
summarize(Recovery_med = median(Recovery),
Recovery_q_0.025 = quantile(Recovery,0.025, na.rm = TRUE),
Recovery_q_0.975 = quantile(Recovery,0.975, na.rm = TRUE))
# -----------------------------------------
# Description of recovery progress, assuming goals are met
# -----------------------------------------
suppressWarnings({
Recovery_index_2050 <- subset(Recovery_summary, Year == 2050)
Recovery_percent_2050 <- subset(percent_change_summary_Recovery, Year == 2050)
# Year in which full recovery is achieved
Year_of_full_Recovery <- apply(percent_of_Baseline_Recovery[,which(year_seq_projection > year_goals_are_set)],1,function(x) min(which(x >= 100), na.rm = TRUE))
if (mean(Year_of_full_Recovery) == Inf | mean(Year_of_full_Recovery) == -Inf){
Year_of_full_Recovery <- rep(NA,3)} else {
Year_of_full_Recovery <- year_seq_projection[year_seq_projection > year_goals_are_set][Year_of_full_Recovery] %>%
quantile(c(0.025,0.5,0.975))
}
})
recovery_description <- data.frame(
Trend_q0.025 = quantile(Trend_samples,0.025),
Trend_q0.500 = quantile(Trend_samples,0.500),
Trend_q0.975 = quantile(Trend_samples,0.975),
# Current status of the population (as of last survey)
Current_Prob_Exceed_StatusQuo = Prob_Exceed_StatusQuo,
Current_Prob_Exceed_Recovery = Prob_Exceed_Recovery,
Current_Prob_Exceed_Baseline = Prob_Exceed_Baseline,
# Projected status of population in the future, if recovery target is met
Recovery_Index_2050_q0.025 = Recovery_index_2050$Recovery_q_0.025,
Recovery_Index_2050_q0.500 = Recovery_index_2050$Recovery_med,
Recovery_Index_2050_q0.975 = Recovery_index_2050$Recovery_q_0.975,
Recovery_percent_2050_q0.025 = Recovery_percent_2050$Recovery_q_0.025,
Recovery_percent_2050_q0.500 = Recovery_percent_2050$Recovery_med,
Recovery_percent_2050_q0.975 = Recovery_percent_2050$Recovery_q_0.975,
Year_of_Full_Recovery_q0.025 = Year_of_full_Recovery[1],
Year_of_Full_Recovery_q0.500 = Year_of_full_Recovery[2],
Year_of_Full_Recovery_q0.975 = Year_of_full_Recovery[3])
return(as.list(environment()))
}
# ------------------------------------------------------------------------------
# Conduct projections for each species
# ------------------------------------------------------------------------------
# An empty table to store species results
sp_table <- data.frame()
species_name = "Clay-colored Sparrow"
print(species_name)
# 4 letter species abbreviation code
sp_code <- subset(ac, English_Name == species_name)$Species_ID
# File where annual national indices are stored
filename <- paste0("fitted_models/",sp_code,".RDS")
# Skip species if estimates are unavailable
if (!file.exists(filename)) next
# Load fitted models
sp_results <- readRDS(filename)
# How far back to use trend?
start_year_for_trend <- subset(target_species, Species == species_name)$StartDate
# Generate projections
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 2022-start_year_for_trend,
# Year in which goals were set
year_goals_are_set = 2022,
# Percent change per year once population reaches its target growth rate
target_trend = 3,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.5,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
# Generate projections
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 2022-start_year_for_trend,
# Year in which goals were set
year_goals_are_set = 2022,
# Percent change per year once population reaches its target growth rate
target_trend = 2,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.1,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
species_name = "Canada Warbler"
print(species_name)
# 4 letter species abbreviation code
sp_code <- subset(ac, English_Name == species_name)$Species_ID
# File where annual national indices are stored
filename <- paste0("fitted_models/",sp_code,".RDS")
# Skip species if estimates are unavailable
if (!file.exists(filename)) next
# Load fitted models
sp_results <- readRDS(filename)
# How far back to use trend?
start_year_for_trend <- subset(target_species, Species == species_name)$StartDate
# Generate projections
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 30,#2022-start_year_for_trend,
# Year in which goals were set
year_goals_are_set = 2010,
# Percent change per year once population reaches its target growth rate
target_trend = 3,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.5,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
# Generate projections
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 30,#2022-start_year_for_trend,
# Year in which goals were set
year_goals_are_set = 2010,
# Percent change per year once population reaches its target growth rate
target_trend = 0,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.5,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
# Generate projections
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 30,#2022-start_year_for_trend,
# Year in which goals were set
year_goals_are_set = 2010,
# Percent change per year once population reaches its target growth rate
target_trend = 0,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.01,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
projection_function
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 30,#2022-start_year_for_trend,
# Year in which goals were set
#year_goals_are_set = 2010,
years_to_target_trend = 25,
# Percent change per year once population reaches its target growth rate
target_trend = 0,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.01,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
# Generate projections
sp_projection <- projection_function(
sp_results,
# Years for calculating baseline index for 'full recovery' (average across these years)
baseline_years = c(1980,1981,1982,1983,1984),
# How far back to calculate "current" trend over)
length_current_trend = 30,#2022-start_year_for_trend,
# Year in which goals were set
year_goals_are_set = 2010,
years_to_target_trend = 25,
# Percent change per year once population reaches its target growth rate
target_trend = 0,
# Goal is to increase growth rate by 0.5% per year, until target it reached
annual_growth_rate_improvement = 0.01,
# Final year of projection
end_of_projection = 2100
)
sp_projection$recovery_description
# If the species has not declined, skip
#if (sp_projection$recovery_description$Trend_q0.975 > 0) next
sp_projection$recovery_description <- sp_projection$recovery_description %>%
mutate(Species = species_name) %>%
relocate(Species)
sp_table <- rbind(sp_table,sp_projection$recovery_description)
# ************************************************
# Plot time series of population indices
# ************************************************
sp_plot_index <- ggplot()+
geom_vline(xintercept = sp_projection$year_goals_are_set, size=2, col = "black", alpha = 0.2)+
geom_text(aes(x = sp_projection$year_goals_are_set+1, y = 0.01),
label = "<- Year goals were set", col = "black", alpha = 0.2,
hjust=0, fontface = "bold", size = 2)+
geom_ribbon(data = sp_projection$StatusQuo_summary, aes(x = Year, ymin = StatusQuo_q_0.025, ymax = StatusQuo_q_0.975), alpha = 0.2, fill = "orangered")+
geom_line(data = sp_projection$StatusQuo_summary, aes(x = Year, y = StatusQuo_med), col = "orangered", linewidth = 1)+
geom_ribbon(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, ymin = Recovery_q_0.025, ymax = Recovery_q_0.975), alpha = 0.2, fill = "dodgerblue")+
geom_line(data = subset(sp_projection$Recovery_summary, Year >= sp_projection$year_goals_are_set), aes(x = Year, y = Recovery_med), col = "dodgerblue", linewidth = 1)+
geom_ribbon(data = sp_projection$gam_summary, aes(x = Year, ymin = gam_q_0.025, ymax = gam_q_0.975), alpha = 0.4, fill = "gray50")+
geom_line(data = sp_projection$gam_summary, aes(x = Year, y = gam_med), col = "gray50", linewidth = 1)+
# Observed indices
geom_errorbar(data = subset(sp_projection$indices_summarized, Year >= 1970 & Year <= sp_projection$final_year_of_data),aes(x = Year, ymin = Index_q_0.025, ymax = Index_q_0.975), width = 0, col = "gray30")+
geom_point(data = subset(sp_projection$indices_summarized, Year >= 1970  & Year <= sp_projection$final_year_of_data),aes(x = Year, y = Index), col = "gray30")+
ylab("Population Index")+
xlab("Year")+
theme_few()+
ggtitle(species_name)+
labs(subtitle = paste0("\nCurrent Status (",sp_projection$final_year_of_data,"):\n\n",
"Exceeds status quo trajectory: ",sp_projection$Prob_Exceed_StatusQuo,"% chance\n",
"Exceeds recovery trajectory: ",sp_projection$Prob_Exceed_Recovery,"% chance\n",
"Exceeds 1970 abundance: ",sp_projection$Prob_Exceed_Baseline,"% chance\n"))+
coord_cartesian(ylim=c(0,max(apply(sp_projection$samps,2,function(x) quantile(x, 0.975)))))+
scale_x_continuous(breaks = seq(1970,sp_projection$end_of_projection,10))
print(sp_plot_index)
